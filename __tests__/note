// Lista de Expects

// Para checar se os valores nos testes são os esperados, usamos expects. Na biblioteca jest, existem várias formas de fazer isso, sendo as principais:

// toBe(): compara inteiros ou textos;
// toBeCloseTo(): compara pontos flutuantes obtidos através de operações matemáticas, pois, devido a arredondamentos, podem haver erros com toBe();
// toBeFalsy()/toBeTruthy(): compara valores falsos/verdadeiros em um contexto booleano. No caso de falsy, não apenas false será validado, mas valores como null, 0, '', undefined e NaN também. O restante dos valores é considerado truthy;
// toEqual(): compara objetos, verificando se as propriedades internas são iguais. Usar toBe() não retornará o mesmo resultado.
// Todos os demais métodos de validação podem ser acessados na documentação do jest, clicando aqui https://jestjs.io/pt-BR/docs/expect.

//Lista de Métodos globais

/**
 * Nesta aula, usamos as funções describe e it com frequência. Porém, elas não são as únicas funções globais que existem no jest. Podemos usar algumas funções para controlar quais métodos de teste serão executados ou até executar funções antes/depois das funções de teste.

Veja abaixo as funções globais mais comuns:

describe('', () => {}): cria um contexto com uma descrição para todos os testes dentro da função;
test('', () => {}): cria um teste com uma descrição que deve ser correspondida ao que o teste pretende testar.
it('', () => {}): funciona exatamente igual ao test('', () => {}). É usado para começar a frase do teste, geralmente em inglês, onde a palavra it não precisa ser repetida. Exemplo: it('deve retornar verdadeiro') ou it('must return true');
afterAll(() => {}): executa a função após todos os testes do seu contexto (arquivo ou describe) terminarem sua execução;
beforeAll(() => {}): executa a função antes que todos os testes do seu contexto (arquivo ou describe) comecem sua execução;
afterEach(() => {}): executa a função várias vezes, sempre que um teste do seu contexto (arquivo ou describe) terminarem sua execução;
beforeEach(() => {}): executa a função várias vezes, sempre antes que um teste do seu contexto (arquivo ou describe) começar sua execução.
Mais métodos globais podem ser acessados pela documentação, clicando neste link https://jestjs.io/pt-BR/docs/api.

Experimente também os métodos only e skip nos seus testes, mas lembre-se de que não é recomendado que você mantenha eles ao mandar os testes para produção. Exclua testes desnecessários e mantenha históricos em sistemas de versionamento, como o git.
 */


/**
Nesta aula, aprendemos a simular funções para que os dados originais não sejam afetados. Usamos alguns métodos do jest para trabalhar com mocks, e abaixo estão os mais utilizados:

mockClear(): Limpa todos os registros das chamadas das funções;
mockReset(): Faz tudo o que mockClear() faz, e também limpa as implementações e valores a serem retornados, voltando a ser como quando criamos uma função jest.fn();
mockRestore(): Faz tudo o que mockClear() faz, e também volta a implementação de método original;
mockImplementation(fn): Seta uma nova implementação para a função mockada. Há um atalho para esse método: jest.fn(implementation);
mockReturnValue(value): Seta um valor fixo a ser retornado.
Você pode verificar mais funções neste link da documentação. https://jestjs.io/pt-BR/docs/mock-function-api
*/

/**
Além do mock do arquivo ou módulo completo, podemos também mockar um único método. Veja o exemplo abaixo de como podemos mockar o método useEffect do próprio React Native:

import React from 'react';

test('mock de um método', () => {
    jest.spyOn(React, 'useEffect').mockImplementation((f) => f());
});

Neste exemplo, o useEffect mockado irá executar a função (f) logo ao ser chamado.

Você pode acessar a documentação do spyOn neste link. https://jestjs.io/pt-BR/docs/jest-object#jestspyonobject-methodname

*/

